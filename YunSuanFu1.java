/*
算术运算符
关系运算符
逻辑运算符
字符串连接运算符
三元运算符



*算术运算符
+ 求和
- 相减
* 乘积
/ 商
% 求余数【取模】例如%2来判断单双数


++ 自加1

int k = 10;
++ k;
k ++;
System.out.println(k);//k=11

int a = 100;
int b = a ++;//这样int b = 100 先做int b = a 再给a加1

int a = 100
int b = ++ a;//这样int b = 101 先做++ 再赋值





-- 自减1

注意：一个表达式有多个运算符，运算符有优先级，不确定的加小括号，优先级得到提升。
      没必要专门记忆运算符的优先级


*关系运算符

>大于
>=大于等于
<小于
<=小于等于
==等于
!=不等于

=是赋值运算
==是关系运算

关系运算符的结果一定是布尔型： ture/false

int a = 10;
int b = 10;

System.out.println(a > b);//false
System.out.println(a = b);//true



*逻辑运算符

& 逻辑与   （两边算子都是true，结果才是true）
| 逻辑或   （两边的算子只要有一个是true，结果就是true
! 逻辑非   （取反，!false就是true,!true就是false，这是一个单目运算符
^ 逻辑异或 （两边算的不一样，结果就是true

&& 短路与
|| 短路或

1、逻辑运算符要求两边的算子都是布尔类型，并且结果也是一个布尔类型
2、短路与和逻辑与最终的结果都是相同的，只不过短路与存在短路现象
3、短路或和逻辑或最终的结果都是相同的，只不过短路或存在短路现象
4、什么情况下发生短路现象呢？
5、什么时候选择使用逻辑与运算符？什么时候选择使用短路与运算符？


5>3 并且 5>2


//逻辑与和短路与
	从某个角度看 短路与更智能。由于后面的表达式不执行，
	所以效率高，短路与更常用
	
	在特殊情况下 两个表达式都必须执行就得用逻辑与


	
	什么情况下发生短路或？
		*第一个表达式执行结果是true，会发生短路或
	什么情况下发生短路与？
		*第一个表达式结果为false，会发生短路与
*/

public class YunSuanFu1
{
	public static void main(String []args)
		{
			int x = 10;
			int y = 0;
			
			System.out.println( x < y & ++x < y ); //逻辑与 即使第一个结果是false，后面依然会执行
			System.out.println(x);// x = 11

			int a = 10;
			int b = 0;
			
			System.out.println( a < b && ++a < b ); //短路与 前面结果是false，后面的就不会执行
			System.out.println(a);// x = 10
		}
}